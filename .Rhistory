getModelsFromDatamart <- function(conn, appliesToFilter=NULL, ruleNameFilter=NULL, applicationFilter=NULL, mostRecentOnly=T, verbose=T)
{
wheres <- list()
if(!is.null(appliesToFilter)) {
wheres[["appliesToFilter"]] <- paste("pyappliestoclass=", "'", appliesToFilter, "'", sep="")
}
if(!is.null(ruleNameFilter)) {
wheres[["ruleNameFilter"]] <- paste("pyconfigurationname=", "'", ruleNameFilter, "'", sep="")
}
if(!is.null(applicationFilter)) {
wheres[["applicationFilter"]] <- paste("pxapplication=", "'", applicationFilter, "'", sep="")
}
if (mostRecentOnly) {
wheres[["mostRecentOnly"]] <- paste("pysnapshottime IN (select max(pysnapshottime) from", DATAMART_MODELTABLE, ")")
}
if (length(wheres) >= 1) {
query <- paste("select * from", DATAMART_MODELTABLE, "where", paste(wheres, collapse = " and "))
} else {
query <- paste("select * from", DATAMART_MODELTABLE)
}
if(verbose) {
print(query)
}
models <- as.data.table(dbGetQuery(conn, query))
setnames(models, tolower(names(models)))
models[, c("pzinskey","pxinsname","pxobjclass","pxcommitdatetime","pxsavedatetime") := NULL] # drop un-interesting columns added by Pega ObjSave mechanics
models$pysnapshottime <- fasttime::fastPOSIXct(models$pysnapshottime)
return(models)
#
# lastsnapshots <- models[,
#                         .SD[which(pysnapshottime == max(pysnapshottime))],
#                         by=c("pyconfigurationname", "pyappliestoclass", "pxapplication")]
# return(lastsnapshots)
}
conn
?dbGetQuery
library(devtools)
R CMD INSTALL --no-multiarch cdhtools
library(devtools)
dev_tools::load_all()
devtools::load_all()
devtools::load_all("cdhtools")
library(devtools)
check()
getwd()
library(devtools)
getwd()
